cmake_minimum_required (VERSION 3.10)

set (PROJECT OpenTTD)

project (${PROJECT} CXX)

if (CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
    message (FATAL_ERROR "Building in-source is not supported! Create a build dir and remove ${CMAKE_SOURCE_DIR}/CMakeCache.txt")
endif ()

include (FindPkgConfig)

# Paths
set (PREFIX_DIR "/usr/local" CACHE STRING "specifies the prefix for all installed files [/usr/local]")
set (BINARY_DIR "games" CACHE STRING "location of the binary. Will be prefixed with the prefix-dir [games]")
set (DATA_DIR "share/games/openttd" CACHE STRING "Will be prefixed with the prefix-dir [share/games/openttd]")
set (DOC_DIR "$doc_dir" CACHE STRING "location of the doc files Will be prefixed with the prefix-dir [$doc_dir]")
set (ICON_DIR "share/pixmaps" CACHE STRING "location of icons. Will be prefixedwith the prefix-dir [share/pixmaps]")
set (ICON_THEME_DIR "$icon_theme_dir" CACHE STRING "location of icon theme. Will be prefixed with the prefix-dir and postfixed with size-dirs [$icon_theme_dir]")
set (MAN_DIR "$man_dir" CACHE STRING "location of the manual page (UNIX only) Will be prefixed with the prefix-dir [$man_dir]")
set (MENU_DIR "share/applications" CACHE STRING "location of the menu item. (UNIX only, except OSX) Will be prefixed with the prefix-dir [share/applications]")
set (PERSONAL_DIR "" CACHE STRING "location of the personal directory [os-dependent default]")
set (SHARED_DIR "" CACHE STRING "location of shared data files [os-dependent default]")
set (INSTALL_DIR "/" CACHE STRING "specifies the root to install to. Useful to install into jails [/]")
set (BINARY_NAME "openttd" CACHE STRING "the name used for the binary, icons, desktop file, etc. when installing [openttd]")

# Features and packages
set (ENABLE_DEBUG 0 CACHE STRING "enable debug-mode (LVL=[0123], 0 is release")
set (ENABLE_DESYNC_DEBUG 0 CACHE STRING "enable desync debug options (LVL=[012], 0 is none")
option (ENABLE_PROFILING "enables profiling" OFF)
option (ENABLE_LTO "enables GCC's Link Time Optimization (LTO)/ICC's Interprocedural Optimization" OFF)
option (ENABLE_DEDICATED "compile a dedicated server (without video)" OFF)
option (ENABLE_STATIC "enable static compile (doesn't work for all HOSTs)" ON)
option (ENABLE_TRANSLATOR "enable extra output for translators" OFF)
set (ENABLE_UNIVERSAL 0 "enable universal builds (OSX ONLY). Allowed is any combination of architectures: i386 ppc ppc970 ppc64 x86_64" OFF)
option (ENABLE_OSX_G5 "enables optimizations for ppc970 (G5) (OSX ONLY)" OFF)
option (ENABLE_COCOA_QUARTZ "enable the quartz window mode driver for Cocoa (OSX ONLY)" ON)
option (ENABLE_COCOA_QUICKDRAW "enable the quickdraw window mode driver for Cocoa (OSX ONLY)" ON)
option (ENABLE_UNICODE "enable unicode support to build win9x version (Win32 ONLY)" ON)
option (ENABLE_CONSOLE "compile as a console application instead of as a GUI application. If this setting is active, debug output will appear in the same console instead of opening a new window. (Win32 ONLY)" ON)
option (ENABLE_NETWORK "enable network support" ON)
option (ENABLE_ASSERT "enable asserts (continue on errors)" ON)
option (ENABLE_STRIP "enable any possible stripping" OFF)
option (WITHOUT_OSX_ROOT "disable the automatic adding of sysroot (OSX ONLY)" OFF)
option (WITHOUT_APPLICATION_BUNDLE "disable generation of application bundle (OSX ONLY)" OFF)
option (WITHOUT_MENU_ENTRY "Don't generate a menu item (Freedesktop based only)" OFF)
set (MENU_GROUP "" CACHE STRING "Category in which the menu item will be placed (Freedesktop based only)")
set (MENU_NAME PROJECT CACHE STRING "Name of the menu item when placed [OpenTTD]")
option (WITH_DIRECT_MUSIC "enable direct music support (Win32 ONLY)" ON)
set (WITH_SORT sort CACHE STRING "define a non-default location for sort [sort]")
set (WITH_MIDI "" CACHE STRING "define which midi-player to use")
set (WITH_MIDI_ARG "" CACHE STRING "define which args to use for the midi-player")
option (WITH_LIBTIMIDITY "enables libtimidity support" ON)
option (WITH_ALLEGRO "enables Allegro video driver support" ON)
option (WITH_COCOA "enables COCOA video driver (OSX ONLY)" ON)
option (WITH_SDL "enables SDL video driver support" ON)
option (WITH_ZLIB "enables zlib support" ON)
option (WITH_LIBLZMA "enables liblzma support" ON)
option (WITH_LIBLZO2 "enables liblzo2 support" ON)
option (WITH_LIBPNG "enables libpng support" ON)
option (WITH_FREETYPE "enables libfreetype support" ON)
option (WITH_FONTCONFIG "enables fontconfig support" ON)
option (WITH_XDG_BASE_DIR "enables XDG base directory support" ON)
option (WITH_ICU_LAYOUT "enables icu components for layouting (right-to-left support)" ON)
option (WITH_ICU_SORT "enables icu components for locale specific string sorting" ON)
option (STATIC_ICU "try to link statically (libsicu instead of libicu; can fail as the new name is guessed)" OFF)
set (WITH_ICONV 1 CACHE STRING "enables iconv support")
option (DISABLE_BUILTIN_DEPEND "disable use of builtin deps finder" OFF)
option (WITH_MAKEDEPEND "enables makedepend support" OFF)
option (WITH_CCACHE "enables ccache support" ON)
option (WITH_DISTCC "enables distcc support" ON)
option (WITHOUT_GRFCODEC "disable usage of grfcodec and re-generation of base sets" ON)
option (WITHOUT_THREADS "disable threading support" ON)
option (WITHOUT_NFORENUM ON)
option (WITHOUT_SSE "disable SSE support (x86/x86_64 only)" ON)

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set (BUILD_64 ON)
else ()
    set (BUILD_64 OFF)
endif ()

# TODO: define more OS
# OS only allows DETECT, UNIX, OSX, FREEBSD, DRAGONFLY, OPENBSD, NETBSD, MORPHOS, BEOS, HAIKU, SUNOS, CYGWIN, MINGW, OS2, and DOS
if (APPLE)
    set (OS "OSX")
elseif (MINGW)
    set (OS "MINGW")
elseif (CYGWIN)
    set (OS "CYGWIN")
elseif (WIN32)
    set (OS "DOS")
else ()
    set (OS "UNIX")
endif ()

# enable_debug should be between 0 and 4
list (APPEND DEBUG_VALUES 0 1 2 3)
if (NOT (ENABLE_DEBUG IN_LIST DEBUG_VALUES))
    message (FATAL_ERROR "Invalid ENABLE_DEBUG value '${ENABLE_DEBUG}' - valid values: [0123]")
endif ()

# enable_desync_debug should be between 0 and 3
list (APPEND DESYNC_DEBUG_VALUES 0 1 2)
if (NOT (ENABLE_DESYNC_DEBUG IN_LIST DESYNC_DEBUG_VALUES))
    message (FATAL_ERROR "Invalid ENABLE_DESYNC_DEBUG value '${ENABLE_DESYNC_DEBUG}' - valid values: [012]")
endif ()

# Check for universal builds; they only make sense for OSX, so fail if enabled for another OS
if (NOT (ENABLE_UNIVERSAL EQUAL 0))
    if (NOT APPLE)
        message (FATAL_ERROR "ENABLE_UNIVERSAL only works on OSX")
    endif ()
endif ()

# builtin make depend
if (DISABLE_BUILTIN_DEPEND)
    set (ENABLE_BUILTIN_DEPEND 0 STRING)
else ()
    set (ENABLE_BUILTIN_DEPEND 1 STRING)
endif ()

# warn user about static on some OS
if (ENABLE_STATIC)
    if (NOT MINGW AND NOT CMAKE_HOST_WIN32 AND NOT CYGWIN AND NOT APPLE)
        message (WARNING "static is only known to work on Windows, DOS, MacOSX and MorphOS - use at your own risk")
    endif ()
endif ()

# unicode flag only relevent on windows
if (ENABLE_UNICODE)
    if (NOT MINGW AND NOT MSVC AND NOT CYGWIN)
        message (STATUS "Non-windows OS - clearing unicode flag")
        set (ENABLE_UNICODE OFF)
    endif ()
endif ()

# Show what we configured for debugging
if (ENABLE_DEBUG EQUAL 0)
    message (STATUS "using debug level... no")
elseif (ENABLE_PROFILING)
    message (STATUS "using debug level... profiling (debug level ${ENABLE_DEBUG})")
else ()
    message (STATUS "using debug level... level ${ENABLE_DEBUG}")
endif ()

if (ENABLE_DESYNC_DEBUG EQUAL 0)
    message (STATUS "using desync debug level... no")
else ()
    message (WARNING "desync debug functions slow down the game considerably. Use only when you are instructed to do so or when you know what you are doing.")
endif ()

if (ENABLE_LTO)
    set (CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
endif ()

if (CMAKE_INTERPROCEDURAL_OPTIMIZATION)
    message (STATUS "using link time optimization... yes")
else ()
    message (STATUS "using link time optimization... no")
endif ()

# TODO: OSX sysroot handling...
#set (WITH_OSX_ROOT NOT WITHOUT_OSX_ROOT)
#if (NOT APPLE AND WITH_OSX_ROOT)
#    set (WITH_OSX_ROOT OFF)
#    message (STATUS "checking OSX sysroot... not OSX, skipping")
#endif ()

# allegro
if (APPLE)
    set (WITH_ALLEGRO OFF)
    message (STATUS "checking Allegro... OSX, skipping")
endif ()

if (WITH_ALLEGRO)
    if (WITH_COCOA)
        message (FATAL_ERROR "it is impossible to compile both Allegro and COCOA - please deselect one of them and try again")
    endif ()

    if (ENABLE_DEDICATED)
        message (FATAL_ERROR "it is impossible to compile a dedicated with Allegro - please deselect one of them and try again")
    endif ()

    pkg_check_modules (ALLEGRO REQUIRED allegro>=4.4)
    message (STATUS "checking Allegro... enabled")
else ()
    message (STATUS "checking Allegro... disabled")
endif ()

# sdl
if (APPLE)
    set (WITH_SDL OFF)
    message (STATUS "checking SDL... OSX, skipping")
endif ()

if (WITH_SDL)
    if (WITH_COCOA)
        message (FATAL_ERROR "it is impossible to compile both SDL and COCOA - please deselect one of them and try again")
    endif ()

    if (ENABLE_DEDICATED)
        message (FATAL_ERROR "it is impossible to compile a dedicated with SDL - please deselect one of them and try again")
    endif ()

    if (APPLE)
        message (WARNING "sdl is known to fail on some versions of Mac OS X with some hardware configurations - use at own risk")
    endif ()

    pkg_check_modules (SDL REQUIRED sdl>=1.2)
    message (STATUS "checking SDL... enabled")
else ()
    message (STATUS "checking SDL... disabled")
endif ()

# cocoa
if (APPLE AND NOT ENABLE_DEDICATED)
    # default to ON when we aren't building a dedicated server
    set (WITH_COCOA ON)
endif ()

if (WITH_COCOA)
    if (ENABLE_DEDICATED)
        message (FATAL_ERROR "it is impossible to compile a dedicated with COCOA - please deselect one of them and try again")
    endif ()

    if (NOT APPLE)
        message (FATAL_ERROR "COCOA video driver is only supported for OSX")
    endif ()

    message (STATUS "checking COCOA... enabled")
else ()
    message (STATUS "checking COCOA... disabled")
endif ()

# quickdraw
if (APPLE AND ENABLE_UNIVERSAL)
    set (ENABLE_COCOA_QUICKDRAW ON)
endif ()

if (ENABLE_COCOA_QUICKDRAW)
    if (BUILD_64)
        set (ENABLE_COCOA_QUICKDRAW OFF)
        message (STATUS "checking Quickdraw window subdriver... disabled (64 bits)")
    else ()
        message (STATUS "checking Quickdraw window subdriver... enabled")
    endif ()
endif ()

# dedicated
if (ENABLE_DEDICATED)
    message (STATUS "checking GDI video driver... dedicated server, skipping")
    message (STATUS "checking dedicated... found")

    if (NOT ENABLE_NETWORK)
        message (FATAL_ERROR "building a dedicated server without network support is pointless")
    endif ()
else ()
    if (MINGW OR CYGWIN)
        message (STATUS "checking GDI video driver... found")
    else ()
        message (STATUS "checking GDI video driver... not Windows, skipping")
    endif ()

    if (ALLEGRO_FOUND AND SDL_FOUND AND NOT WITH_COCOA AND NOT MINGW AND NOT CYGWIN)
        message (FATAL_ERROR "no video driver development files found - if you want a dedicated server use --enable-dedicated as parameter")
    else ()
        message (STATUS "checking dedicated... not selected")
    endif ()
endif ()

# console
if (NOT MINGW AND NOT CYGWIN)
    message (STATUS "checking console application... not Windows, skipping")
elseif (ENABLE_CONSOLE AND ENABLE_DEDICATED)
    message (STATUS "checking console application... dedicated server, enabled")
elseif (ENABLE_CONSOLE)
    message (STATUS "checking console application... enabled")
else ()
    message (STATUS "checking console application... disabled")
endif ()

# network
if (ENABLE_NETWORK AND CMAKE_HOST_WIN32)
    message (STATUS "checking network... DOS, skipping")
elseif (ENABLE_NETWORK)
    message (STATUS "checking network... found")
else ()
    message (STATUS "checking network... disabled")
endif ()

# squirrel
message (STATUS "checking squirrel... found")
set (SCRIPT_SRC_DIR "${CMAKE_SOURCE_DIR}/src/3rdparty/squirrel/include")

# translator
if (ENABLE_TRANSLATOR)
    message (STATUS "checking translator... debug")
    list (APPEND STRGEN_FLAGS "-t")
else ()
    message (STATUS "checking translator... no")
endif ()

# assert
if (ENABLE_ASSERT)
    message (STATUS "checking assert... enabled")
else ()
    message (STATUS "checking assert... disabled")
endif ()

# zlib
pkg_check_modules (ZLIB zlib>=1.2)
if (NOT WITH_ZLIB OR NOT ZLIB_FOUND)
    message (WARNING "zlib was not detected or disabled - OpenTTD doesn't require zlib, but it does mean that many features (like loading most old savegames/scenarios, loading heightmaps, using PNG, or using fonts, ...) will be disabled.")
    if (NOT WITH_ZLIB)
        message (WARNING "We strongly suggest you to install zlib.")
    else ()
        message (FATAL_ERROR "no zlib detected - If you want to compile without zlib use --without-zlib as parameter")
    endif ()
endif ()

# lzma
pkg_check_modules (LIBLZMA liblzma>=5.0)
if (NOT WITH_LIBLZMA OR NOT LIBLZMA_FOUND)
    message (WARNING "lzma was not detected or disabled - OpenTTD doesn't require lzma, but it does mean that many features (like loading most savegames/scenarios and joining most servers) will be disabled.")
    if (NOT WITH_LIBLZMA)
        message (WARNING "We strongly suggest you to install liblzma.")
    else ()
        message (FATAL_ERROR "If you want to compile without lzma use --without-lzma as parameter")
    endif ()
endif ()

# lzo2
find_library(LIBLZO2 NAMES lzo2 liblzo2.a)
if (NOT WITH_LIBLZO2 OR NOT LIBLZO2)
    message (WARNING "liblzo2 was not detected or disabled - OpenTTD doesn't require liblzo2, but it does mean that loading old savegames/scenarios will be disabled.")
    if (NOT WITH_LIBLZO2)
        message (WARNING "We strongly suggest you to install liblzo2.")
    endif ()
else ()
    message (STATUS "Found LZO2 at ${LIBLZO2}")
endif ()

pkg_check_modules (LIBXDG_BASEDIR libxdg-basedir>=1.2)
pkg_check_modules (LIBPNG libpng>=1.2)
pkg_check_modules (LIBFREETYPE freetype2>=2.2)

if (WITH_FONTCONFIG)
    if (MINGW OR CYGWIN)
        message (STATUS "checking libfontconfig... WIN32, skipping")
    elseif (APPLE)
        message (STATUS "checking libfontconfig... OSX, skipping")
    else ()
        message (STATUS "checking libfontconfig... enabled")
        pkg_check_modules (LIBFONTCONFIG REQUIRED fontconfig>=2.3)
    endif ()
else ()
    message (STATUS "checking libfontconfig... disabled")
endif ()

pkg_check_modules (LIBICU_LX icu-lx>=4.8)
if (NOT LIBICU_LX_FOUND)
    set (WITH_ICU_LAYOUT OFF)
endif ()

pkg_check_modules (LIBICU_I18N icu-i18n>=4.8)
if (NOT LIBICU_I18N_FOUND)
    set (WITH_ICU_SORT OFF)
endif ()

pkg_check_modules (LIBTIMIDITY libtimidity>=0.1)
if (NOT LIBTIMIDITY_FOUND)
    set (WITH_LIBTIMIDITY OFF)
endif ()

# direct music
if (WITH_DIRECT_MUSIC)
    if (NOT MINGW AND NOT CYGWIN)
        message (STATUS "checking direct-music... not Windows, skipping")
        set (WITH_DIRECT_MUSIC OFF)
    else ()
        message (STATUS "checking direct-music... enabled")
    endif ()
endif ()

# TODO: sort detection and validation
message (STATUS "checking sort... ${WITH_SORT}")

# Suppress language errors when there is a version defined, indicating a release
#  It just isn't pretty if any release produces warnings in the languages.
find_file (VERSION_FILE "${CMAKE_SOURCE_DIR}/version")
if (VERSION_FILE)
    set (LANG_SUPPRESS ON)
    message (STATUS "suppress language errors... yes")
else ()
    set (LANG_SUPPRESS OFF)
    message (STATUS "suppress language errors... no")
endif ()

# strip
# TODO: detect morphos, os/2 sunos
# TODO: implement check strip function
if (NOT ENABLE_DEBUG AND NOT ENABLE_PROFILING AND ENABLE_STRIP)
    if (APPLE)
        set (STRIP_ARG "")
    elseif ()
        set (STRIP_ARG "-s")
    endif ()
    message (STATUS "checking stripping... $ENV{STRIP} ${STRIP_ARG}")
else ()
    message (STATUS "checking stripping... skipped")
endif ()

# distcc
find_program(DISTCC distcc)
if (NOT DISTCC)
    set (WITH_DISTCC OFF)
    message (STATUS "checking distcc... no")
else ()
    message (STATUS "checking distcc... yes")
endif ()

# ccache
find_program(CCACHE ccache)
if (NOT CCACHE)
    set (WITH_CCACHE OFF)
    message (STATUS "checking ccache... no")
else ()
    message (STATUS "checking ccache... yes")
endif ()

# grfcodec
if (WITHOUT_GRFCODEC)
    message (STATUS "checking grfcodec... no")
else ()
    find_program(GRFCODEC grfcodec)
    if (NOT GRFCODEC)
        set (WITHOUT_GRFCODEC ON)
        message (STATUS "checking grfcodec... no")
    else ()
        message (STATUS "checking grfcodec... yes")
    endif ()
endif ()

# nforenum
if (WITHOUT_NFORENUM)
    message (STATUS "checking nforenum... no")
else ()
    find_program(NFORENUM nforenum)
    if (NOT NFORENUM)
        set (WITHOUT_NFORENUM ON)
        message (STATUS "checking nforenum... no")
    else ()
        message (STATUS "checking nforenum... yes")
    endif ()
endif ()

# nforenum/grfcodec: both or none
if ((NOT WITHOUT_GRFCODEC AND WITHOUT_NFORENUM) OR (WITHOUT_GRFCODEC AND NOT WITHOUT_NFORENUM))
    message (FATAL_ERROR "checking nforenum/grfcodec... nforenum needs grfcodec enabled and vice versa - select both or none")
endif ()

# override threads on win32
if (CMAKE_HOST_WIN32)
    set (WITHOUT_THREADS ON)
endif ()

set (WITH_APPLICATION_BUNDLE (NOT WITHOUT_APPLICATION_BUNDLE))
if (NOT APPLE AND WITH_APPLICATION_BUNDLE)
    set (WITHOUT_APPLICATION_BUNDLE ON)
    set (WITH_APPLICATION_BUNDLE OFF)
    message (STATUS "checking OSX application bundle... not OSX, skipping")
endif ()

if (APPLE AND WITH_APPLICATION_BUNDLE)
    message (STATUS "checking OSX application bundle... enabled")
    set (OSXAPP "${PROJECT}.app")
endif ()

# TODO: OSX_G5 detection

# iconv
if (WITH_ICONV)
    if (NOT APPLE)
        set (WITH_ICONV OFF)
        message (STATUS "checking iconv... not OSX, skipping")
    else ()
        if (WITH_ICONV EQUAL 1 OR WITH_ICONV EQUAL 2 OR WITH_ICONV EQUAL "")
            find_path (ICONV iconv.h HINTS "/usr/include" "/usr/local/include")
        else ()
            find_path (ICONV iconv.h HINTS "${WITH_ICONV}")
        endif ()

        if (NOT ICONV)
            if (WITH_ICONV EQUAL 2)
                # if the user forced it
                message (FATAL_ERROR "iconv couldn't be found!")
            elseif (NOT (WITH_ICONV EQUAL 1))
                # if the user specified the directory
                message (FATAL_ERROR "iconv couldn't be found at ${WITH_ICONV}!")
            endif ()
        else ()
            message (STATUS "checking iconv... found at ${ICONV}")

            # TODO - test for old iconv??
            set (NON_CONST_ICONV ON)
            set (LINK_TO_ICONV ON)
        endif ()
    endif ()
endif ()

# TODO: all the random directories for installation

# common compiler flags
list (APPEND C_FLAGS -Wall)

# common libraries
list (APPEND LIBS "stdc++")

message (STATUS "checking compiler... configuring for ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)
        message (WARNING "you seem to be using a very old version of ICC - OpenTTD hasn't been tested with this version")
    elseif (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 12.0)
        message (WARNING "you seem to be using an unsupported ICC version - ICC older than 12.0 is known to fail to compile OpenTTD")
    endif ()

    # remark #111: statement is unreachable
    list (APPEND C_FLAGS "-wd111")

    # remark #181: argument is incompatible with corresponding format string conversion
    # ICC is very picky about signedness of operands, warnings provided by GCC are enough
    list (APPEND C_FLAGS "-wd181")

    # remark #271: trailing comma is nonstandard
    list (APPEND C_FLAGS "-wd271")

    # remark #280: selector expression is constant
    list (APPEND C_FLAGS "-wd280")

    # remark #304: access control not specified ("public" by default)
    list (APPEND C_FLAGS "-wd304")

    # remark #383: value copied to temporary, reference to temporary used
    list (APPEND C_FLAGS "-wd383")

    # remark #444: destructor for base class ... is not virtual
    list (APPEND C_FLAGS "-wd444")

    # remark #593: variable ... was set but never used
    list (APPEND C_FLAGS "-wd593")

    # warning #654: overloaded virtual function ... is only partially overridden in class ...
    list (APPEND C_FLAGS "-wd654")

    # remark #810: conversion from ... to ... may lose significant bits
    list (APPEND C_FLAGS "-wd810")

    # remark #869: parameter ... was never referenced
    list (APPEND C_FLAGS "-wd869")

    # warning #873: function ... ::operator new ... has no corresponding operator delete ...
    list (APPEND C_FLAGS "-wd873")

    # remark #981: operands are evaluated in unspecified order
    list (APPEND C_FLAGS "-wd981")

    # remark #1418: external function definition with no prior declaration
    list (APPEND C_FLAGS "-wd1418")

    # remark #1419: external declaration in primary source file
    list (APPEND C_FLAGS "-wd1419")

    # remark #1572: floating-point equality and inequality
    list (APPEND C_FLAGS "-wd1572")

    # remark #1599: declaration hides variable/parameter ...
    list (APPEND C_FLAGS "-wd1599")

    # remark #1720: function ... ::operator new ... has no corresponding member operator delete ...
    list (APPEND C_FLAGS "-wd1720")

    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 11.0)
        # warns about system headers with recent glibc:
        # warning #1292: attribute "__nonnull__" ignored
        list (APPEND C_FLAGS "-wd1292")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10.0)
        # warning #1899: multicharacter character literal (potential portability problem)
        list (APPEND C_FLAGS "-wd1899")

        # vec report defaults to telling where it did loop vectorisation, which is not very important
        list (APPEND C_FLAGS "-vec-report=0")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 11.0)
        # remark #2259: non-pointer conversion from ... to ... may lose significant bits
        list (APPEND C_FLAGS "-wd2259")

        # Use c++0x mode so static_assert() is available
        list (APPEND C_FLAGS "-std=c++0x")
    endif ()

    if (ENABLE_LTO)
        # TODO: detect ipo
        list (APPEND C_FLAGS "-ipo")
    endif ()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    # aliasing rules are not held in openttd code
    list (APPEND C_FLAGS "-fno-strict-aliasing")

    # -W alone doesn't enable all warnings enabled by -Wall; on the other hand,
    # -Weverything enables too many useless warnings that can't be disabled (as of 3.0)
    list (APPEND C_FLAGS "-W" "-Wextra")

    # warning: unused parameter '...'
    list (APPEND C_FLAGS "-Wno-unused-parameter")

    # warning: expression result unused
    list (APPEND C_FLAGS "-Wno-unused-value")

    # warning: multi-character character constant
    list (APPEND C_FLAGS "-Wno-multichar")

    # warning: explicitly assigning a variable of type '...' to itself
    # it happens when using the FOR_ALL_WINDOWS_FROM_BACK_FROM macro
    list (APPEND C_FLAGS "-Wno-self-assign")

    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.0)
        # warning: equality comparison with extraneous parentheses
        list (APPEND C_FLAGS "-Wno-parentheses")

        # warning: operands of ? are integers of different signs: 'unsigned int' and 'int'
        list (APPEND C_FLAGS "-Wno-sign-compare")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 3.0)
        # warning: equality comparison with extraneous parentheses
        # this warning could be useful, but it warns about code in squirrel
        list (APPEND C_FLAGS "-Wno-parentheses-equality")
    endif ()

    if (WITH_CCACHE)
        # ccache and distcc run separate preprocess and compile passes,
        # both are fed with the same CFLAGS. Unfortunately, clang
        # complains about -I when compiling preprocessed files:
        # "clang: warning: argument unused during compilation: '-I /usr/include'"
        list (APPEND C_FLAGS "-Qunused-arguments")
    endif ()

    if (NOT ENABLE_ASSERT)
        # do not warn about unused variables when building without asserts
        list (APPEND C_FLAGS "-Wno-unused-variable")
    endif()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 3.3)
        # clang completed C++11 support in version 3.3
        list (APPEND C_FLAGS "-std=c++11")
    endif ()

    # rdynamic is used to get useful stack traces from crash reports.
    list (APPEND LD_FLAGS "-rdynamic")
else ()
    # Assume gcc, since it just uses argv[0] in its --version output
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.3)
        message (FATAL_ERROR "gcc older than 3.3 can't compile OpenTTD because of its poor template support")
    endif ()

    list (APPEND C_FLAGS
            "-Wno-multichar"
            "-Wsign-compare"
            "-Wundef"
            "-Wwrite-strings"
            "-Wpointer-arith"
            "-W"
            "-Wno-unused-parameter"
            "-Wredundant-decls"
            "-Wformat=2"
            "-Wformat-security")

    if (NOT ENABLE_ASSERT)
        # do not warn about unused variables when building without asserts
        list (APPEND C_FLAGS "-Wno-unused-variable")

        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)
            # GCC 4.6 gives more warnings, disable them too
            list (APPEND C_FLAGS "-Wno-unused-but-set-variable")
            list (APPEND C_FLAGS "-Wno-unused-but-set-parameter")
        endif ()
    endif()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 3.4)
        # Warn when a variable is used to initialise itself:
        # int a = a;
        list (APPEND C_FLAGS "-Winit-self")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.0)
        # GCC 4.0+ complains about that we break strict-aliasing.
        #  On most places we don't see how to fix it, and it doesn't
        #  break anything. So disable strict-aliasing to make the
        #  compiler all happy.
        list (APPEND C_FLAGS "-fno-strict-aliasing")

        # Warn about casting-out 'const' with regular C-style cast.
        #  The preferred way is const_cast<>() which doesn't warn.
        list (APPEND C_FLAGS "-Wcast-qual")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.2)
        # GCC 4.2+ automatically assumes that signed overflows do
        # not occur in signed arithmetics, whereas we are not
        # sure that they will not happen. It furthermore complains
        # about its own optimized code in some places.
        list (APPEND C_FLAGS "-fno-strict-overflow")

        # GCC 4.2 no longer includes -Wnon-virtual-dtor in -Wall.
        # Enable it in order to be consistent with older GCC versions.
        list (APPEND C_FLAGS "-Wnon-virtual-dtor")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.3 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
        # Use gnu++0x mode so static_assert() is available.
        # Don't use c++0x, it breaks mingw (with gcc 4.4.0).
        list (APPEND C_FLAGS "-std=gnu++0x")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.5)
        # Prevent optimisation supposing enums are in a range specified by the standard
        # For details, see http://gcc.gnu.org/PR43680
        list (APPEND C_FLAGS "-fno-tree-vrp")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.7)
        # Disable -Wnarrowing which gives many warnings, such as:
        # warning: narrowing conversion of '...' from 'unsigned int' to 'int' inside { } [-Wnarrowing]
        # They are valid according to the C++ standard, but useless.
        list (APPEND C_FLAGS "-Wno-narrowing")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.7)
        # Disable bogus 'attempt to free a non-heap object' warning
        list (APPEND C_FLAGS "-Wno-free-nonheap-object")
    endif ()

    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6.0)
        # -flifetime-dse=2 (default since GCC 6) doesn't play
        # well with our custom pool item allocator
        list (APPEND C_FLAGS "-flifetime-dse=1" "-std=gnu++14")
    endif ()

    if (ENABLE_LTO)
        # TODO detect flto
        # Use LTO only if we see LTO exists and is requested
        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS_EQUAL 4.6)
            list (APPEND C_FLAGS "-flto")
        else ()
            list (APPEND C_FLAGS "-flto=jobserver")
        endif ()

        list (APPEND LD_FLAGS "-fwhole-program")

        # TODO: detect rdynamic
        list (APPEND C_FLAGS "-rdynamic")
        list (APPEND LD_FLAGS "-rdynamic")
    endif ()
endif ()

list (APPEND C_FLAGS "-D${OS}")
set (C_FLAGS_BUILD ${C_FLAGS})

if (ENABLE_DEBUG EQUAL 0)
    if (NOT ENABLE_PROFILING)
        # -fomit-frame-pointer and -pg do not go well together (gcc errors they are incompatible)
        list (APPEND C_FLAGS "-fomit-frame-pointer")
    endif ()
else ()
    # Each debug level reduces the optimization by a bit
    if (ENABLE_DEBUG GREATER_EQUAL 1)
        list (APPEND C_FLAGS "-g" "-D_DEBUG")
    endif ()

    if (ENABLE_DEBUG GREATER_EQUAL 2)
        list (APPEND C_FLAGS "-fno-inline")
    endif ()

    if (ENABLE_DEBUG GREATER_EQUAL 3)
        list (APPEND C_FLAGS "-O0")
    else ()
        list (APPEND C_FLAGS "-O2")
    endif ()
endif ()

if (ENABLE_DEBUG LESS_EQUAL 2)
    #[[ TODO - do we need this?
    if [ $enable_debug -le 2 ]; then
		cc_host_is_gcc=`basename "$cc_host" | grep "gcc" 2>/dev/null`
		if [ -n "$cc_host_is_gcc" ]; then
			# Define only when compiling with GCC. Some GLIBC versions use GNU
			# extensions in a way that breaks build with at least ICC.
			# This requires -O1 or more, so debug level 3 (-O0) is excluded.
			CFLAGS="$CFLAGS -D_FORTIFY_SOURCE=2"
		fi

		cc_build_is_gcc=`basename "$cc_build" | grep "gcc" 2>/dev/null`
		if [ -n "$cc_build_is_gcc" ]; then
			# Just add -O1 to the tools needed for building.
			CFLAGS_BUILD="$CFLAGS_BUILD -D_FORTIFY_SOURCE=2 -O1"
		fi
	fi
    ]]
endif ()

if (APPLE AND CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.0)
    # Apple's GCC 4.0 has a compiler bug for x86_64 with (higher) optimization,
    # wrongly optimizing ^= in loops. This disables the failing optimisation.
    list (APPEND C_FLAGS "-fno-expensive-optimizations")
endif ()

if (ENABLE_PROFILING)
    list (APPEND C_FLAGS "-pg")
    list (APPEND LD_FLAGS "-pg")
endif ()

if (WITHOUT_THREADS)
    list (APPEND C_FLAGS "-DNO_THREADS")
endif ()
set (WITH_THREADS (NOT WITHOUT_THREADS))

if (NOT WITHOUT_SSE)
    list (APPEND C_FLAGS "-DWITH_SSE")
endif ()
set (WITH_SSE (NOT WITHOUT_SSE))

if (NOT (CMAKE_CXX_COMPILER_ID STREQUAL "Intel"))
    if (CYGWIN)
        list (APPEND C_FLAGS "-mwin32")
        list (APPEND LD_FLAGS "-mwin32")
    endif ()

    if (CYGWIN OR MINGW)
        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)
            list (APPEND C_FLAGS "-mno-cygwin")
            list (APPEND LD_FLAGS "-mno-cygwin")
        endif ()

        if (ENABLE_CONSOLE)
            list (APPEND LD_FLAGS "-Wl,--subsystem,console")
        else()
            list (APPEND LD_FLAGS "-Wl,--subsystem,windows")
        endif ()

        list (APPEND LIBS
                "ws2_32"
                "winmm"
                "gdi32"
                "dxguid"
                "ole32"
                "imm32")

        if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.4)
            list (APPEND LD_FLAGS_BUILD
                    "-static-libgcc"
                    "-static-libstdc++")
        endif ()

        if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.7)
            list (APPEND C_FLAGS "-mno-ms-bitfields")
        endif ()
    endif ()
endif ()

if (NOT CYGWIN AND NOT MINGW AND NOT APPLE AND NOT WIN32)
    list (APPEND LIBS "pthread")
endif ()

if (NOT CYGWIN AND NOT MINGW AND NOT WIN32)
    list (APPEND LIBS "c")
endif ()

if (APPLE)
    list (APPEND LD_FLAGS "-framework Cocoa")

    # Add macports include dir which is not always set a default system dir. This avoids zillions of bogus warnings.
    list (APPEND C_FLAGS "-isystem/opt/local/include")

    if (NOT ENABLE_DEDICATED AND ENABLE_UNIVERSAL AND NOT (BUILD_64))
        list (APPEND LIBS "-framework QuickTime")
    else ()
        list (APPEND C_FLAGS "-DNO_QUICKTIME")
    endif ()

    if (NOT ENABLE_UNIVERSAL)
        # TODO
        # Universal builds set this elsewhere
        # CFLAGS="$OSX_SYSROOT $CFLAGS"
        # LDFLAGS="$OSX_LD_SYSROOT $LDFLAGS"
    endif ()
endif ()

if (MINGW OR CYGWIN)
    list (APPEND C_FLAGS "-DWIN")
else ()
    list (APPEND C_FLAGS "-DUNIX")
endif ()

if (WITH_ALLEGRO AND ALLEGRO_FOUND)
    list (APPEND C_FLAGS "-DWITH_ALLEGRO")
    list (APPEND C_FLAGS "${ALLEGRO_CFLAGS}")

    if (NOT MINGW AND NOT CYGWIN)
        if (ENABLE_STATIC)
            list (APPEND LIBS "${ALLEGRO_STATIC_LIBRARIES}")
        else ()
            list (APPEND LIBS "${ALLEGRO_LIBRARIES}")
        endif ()
    endif ()
endif ()

if (WITH_SDL AND SDL_FOUND)
    list (APPEND C_FLAGS "-DWITH_SDL")

    # SDL must not add _GNU_SOURCE as it breaks many platforms
    list (APPEND C_FLAGS "${SDL_CFLAGS}")
    list(FILTER C_FLAGS EXCLUDE REGEX "-D_GNU_SOURCE[^ ]*")

    if (NOT MINGW AND NOT CYGWIN)
        if (ENABLE_STATIC)
            list (APPEND LIBS "${SDL_STATIC_LIBRARIES}")
        else ()
            list (APPEND LIBS "${SDL_LIBRARIES}")
        endif ()
    endif ()
endif ()

if (WITH_COCOA)
    list (APPEND C_FLAGS "-DWITH_COCOA")
    list (APPEND LIBS
            "-F/System/Library/Frameworks"
            "-framework Cocoa"
            "-framework Carbon"
            "-framework AudioUnit"
            "-framework AudioToolbox")

    if (ENABLE_COCOA_QUARTZ)
        list (APPEND C_FLAGS "-DENABLE_COCOA_QUARTZ")
    endif ()

    if (ENABLE_COCOA_QUICKDRAW)
        list (APPEND C_FLAGS "-DENABLE_COCOA_QUICKDRAW")
    endif ()
endif ()

if (WITH_ZLIB AND ZLIB_FOUND)
    list (APPEND C_FLAGS "-DWITH_ZLIB")
    list (APPEND C_FLAGS "${ZLIB_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${ZLIB_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${ZLIB_LIBRARIES}")
    endif ()
endif ()

if (WITH_LIBLZMA AND LIBLZMA_FOUND)
    list (APPEND C_FLAGS "-DWITH_LZMA")
    list (APPEND C_FLAGS "${LIBLZMA_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND C_FLAGS "-DLZMA_API_STATIC")
        list (APPEND LIBS "${LIBLZMA_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBLZMA_LIBRARIES}")
    endif ()
endif ()

if (WITH_LIBLZO2 AND LIBLZO2)
    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBLZO2}")
    else ()
        list (APPEND LIBS "lzo2")
    endif ()
endif ()

if (LIBXDG_BASEDIR_FOUND)
    list (APPEND C_FLAGS "-DWITH_XDG_BASEDIR")
    list (APPEND C_FLAGS "${LIBXDG_BASEDIR_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBXDG_BASEDIR_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBXDG_BASEDIR_LIBRARIES}")
    endif ()
endif ()

if (BUILD_64)
    list (APPEND C_FLAGS "-D_SQ64")
    message(STATUS "Checking for 64 bit compiler... found")
else ()
    message(STATUS "Checking for 64 bit compiler... not found ${CMAKE_SIZEOF_VOID_P}")
endif ()

if (WITH_LIBPNG AND LIBPNG_FOUND)
    list (APPEND C_FLAGS "-DWITH_PNG")
    list (APPEND C_FLAGS "${LIBPNG_CFLAGS}")
    list (APPEND LIB_DIRS "${LIBPNG_LIBRARY_DIRS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBPNG_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBPNG_LIBRARIES}")
    endif ()
endif ()

if (WITH_FONTCONFIG AND LIBFONTCONFIG_FOUND)
    list (APPEND C_FLAGS "-DWITH_FONTCONFIG")
    list (APPEND C_FLAGS "${LIBFONTCONFIG_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBFONTCONFIG_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBFONTCONFIG_LIBRARIES}")
    endif ()
endif ()

if (WITH_FREETYPE AND LIBFREETYPE_FOUND)
    list (APPEND C_FLAGS "-DWITH_FREETYPE")
    list (APPEND C_FLAGS "${LIBFREETYPE_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBFREETYPE_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBFREETYPE_LIBRARIES}")
    endif ()
endif ()

if (WITH_ICU_LAYOUT AND LIBICU_LX_FOUND)
    list (APPEND C_FLAGS "-DWITH_ICU_LAYOUT")
    list (APPEND C_FLAGS "${LIBICU_LX_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBICU_LX_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBICU_LX_LIBRARIES}")
    endif ()
endif ()

if (WITH_ICU_SORT AND LIBICU_I18N_FOUND)
    list (APPEND C_FLAGS "-DWITH_ICU_SORT")
    list (APPEND C_FLAGS "${LIBICU_I18N_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBICU_I18N_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBICU_I18N_LIBRARIES}")
    endif ()
endif ()

if (WITH_DIRECT_MUSIC)
    list (APPEND C_FLAGS "-DWIN32_ENABLE_DIRECTMUSIC_SUPPORT")
    # GCC 4.0+ doesn't like the DirectX includes (gives tons of
    #  warnings on it we won't be able to fix). For now just
    #  suppress those warnings.
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.0)
        list (APPEND C_FLAGS "-Wno-non-virtual-dtor")
    endif ()
endif ()

if (WITH_LIBTIMIDITY AND LIBTIMIDITY_FOUND)
    list (APPEND C_FLAGS "-DLIBTIMIDITY")
    list (APPEND C_FLAGS "${LIBTIMIDITY_CFLAGS}")

    if (ENABLE_STATIC)
        list (APPEND LIBS "${LIBTIMIDITY_STATIC_LIBRARIES}")
    else ()
        list (APPEND LIBS "${LIBTIMIDITY_LIBRARIES}")
    endif ()
endif ()

if ((WITH_ICONV GREATER 0) AND ICONV)
    list (APPEND C_FLAGS "-DWITH_ICONV")

    if (LINK_TO_ICONV)
        list (APPEND LIBS "iconv")
        if (NOT (WITH_ICONV EQUAL 2))
            list (APPEND C_FLAGS "-I${ICONV}")
            list (APPEND LIB_DIRS "${ICONV}/../lib")
        endif ()
    endif ()

    if (NOT APPLE AND NOT NON_CONST_ICONV)
        list (APPEND C_FLAGS "-DHAVE_NON_CONST_ICONV")
    endif ()
endif ()

if (WITH_MIDI)
    list (APPEND C_FLAGS "-DEXTERNAL_PLAYER=\\\"${WITH_MIDI}\\\"")
endif ()

if (WITH_MIDI_ARG)
    list (APPEND C_FLAGS "-DMIDI_ARG=\\\"${WITH_MIDI_ARG}\\\"")
endif ()

if (ENABLE_DEDICATED)
    list (APPEND C_FLAGS "-DDEDICATED")
endif ()

if (ENABLE_UNICODE)
    list (APPEND C_FLAGS
            "-DUNICODE"
            "-D_UNICODE")
endif ()

if (ENABLE_NETWORK)
    list (APPEND C_FLAGS "-DENABLE_NETWORK")
endif ()

if (ENABLE_STATIC)
    # OSX can't handle -static in LDFLAGS
    if (NOT APPLE)
        list (APPEND C_FLAGS "-static")
    endif ()
endif ()

if (ENABLE_ASSERT)
    list (APPEND C_FLAGS "-DNDEBUG")
    list (APPEND C_FLAGS_BUILD "-DNDEBUG")
endif ()

if (NOT (ENABLE_DESYNC_DEBUG EQUAL 0))
    list (APPEND C_FLAGS "-DRANDOM_DEBUG")
endif ()

if (ENABLE_OSX_G5)
    list (APPEND C_FLAGS
            "-mcpu=G5"
            "-mpowerpc64"
            "-mtune=970"
            "-mcpu=970"
            "-mpowerpc-gpopt")
endif ()

if (PERSONAL_DIR)
    list (APPEND C_FLAGS "-DWITH_PERSONAL_DIR")
    list (APPEND C_FLAGS "-DPERSONAL_DIR=\\\"${PERSONAL_DIR}\\\"")
endif ()

if (SHARED_DIR)
    list (APPEND C_FLAGS "-DWITH_SHARED_DIR")
    list (APPEND C_FLAGS "-DSHARED_DIR=\\\"${SHARED_DIR}\\\"")
endif ()

list (APPEND C_FLAGS "-DGLOBAL_DATA_DIR=\\\"${PREFIX_DIR}/${DATA_DIR}\\\"")

# TODO: CMAKE_INTERPROCEDURAL_OPTIMIZATION and ENABLE_LTO?

# convert list of flags to a string and place into CMAKE_C_FLAGS
list (REMOVE_DUPLICATES C_FLAGS)
string (REPLACE ";" " " CMAKE_C_FLAGS "${C_FLAGS}")
string (REPLACE ";" " " CMAKE_CXX_FLAGS "${C_FLAGS}")
message (STATUS "compiler flags: ${CMAKE_C_FLAGS}")

# convert list of LD flags to a string and place into CMAKE_EXE_LINKER_FLAGS
list (REMOVE_DUPLICATES LD_FLAGS)
string (REPLACE ";" " " CMAKE_EXE_LINKER_FLAGS "${LD_FLAGS}")
message (STATUS "linker flags: ${CMAKE_EXE_LINKER_FLAGS}")

# TODO
list (REMOVE_DUPLICATES LIBS)
string (REPLACE ";" " " LIBS_STR "${LIBS}")
message (STATUS "libraries: ${LIBS_STR}")

list (REMOVE_DUPLICATES LIB_DIRS)
string (REPLACE ";" " " LIB_DIRS_STR "${LIB_DIRS}")
message (STATUS "libraries dirs: ${LIB_DIRS_STR}")

# TODO: makedepend, distcc, ccache

# TODO: pipe sort?

find_file(ENG_LANG english.txt "${CMAKE_SOURCE_DIR}/src/lang/")
if (NOT ENG_LANG)
    message (FATAL_ERROR "Languages not found in $LANG_DIR. Can't continue without it. Please make sure the dir exists and contains at least english.txt")
endif ()

# sources files
list (APPEND OPENTTD_SRCS "src/airport.cpp")
list (APPEND OPENTTD_SRCS "src/animated_tile.cpp")
list (APPEND OPENTTD_SRCS "src/articulated_vehicles.cpp")
list (APPEND OPENTTD_SRCS "src/autoreplace.cpp")
list (APPEND OPENTTD_SRCS "src/bmp.cpp")
list (APPEND OPENTTD_SRCS "src/cargoaction.cpp")
list (APPEND OPENTTD_SRCS "src/cargomonitor.cpp")
list (APPEND OPENTTD_SRCS "src/cargopacket.cpp")
list (APPEND OPENTTD_SRCS "src/cargotype.cpp")
list (APPEND OPENTTD_SRCS "src/cheat.cpp")
list (APPEND OPENTTD_SRCS "src/command.cpp")
list (APPEND OPENTTD_SRCS "src/console.cpp")
list (APPEND OPENTTD_SRCS "src/console_cmds.cpp")
list (APPEND OPENTTD_SRCS "src/cpu.cpp")
list (APPEND OPENTTD_SRCS "src/crashlog.cpp")
list (APPEND OPENTTD_SRCS "src/currency.cpp")
list (APPEND OPENTTD_SRCS "src/date.cpp")
list (APPEND OPENTTD_SRCS "src/debug.cpp")
list (APPEND OPENTTD_SRCS "src/dedicated.cpp")
list (APPEND OPENTTD_SRCS "src/depot.cpp")
list (APPEND OPENTTD_SRCS "src/disaster_vehicle.cpp")
list (APPEND OPENTTD_SRCS "src/driver.cpp")
list (APPEND OPENTTD_SRCS "src/economy.cpp")
list (APPEND OPENTTD_SRCS "src/effectvehicle.cpp")
list (APPEND OPENTTD_SRCS "src/elrail.cpp")
list (APPEND OPENTTD_SRCS "src/engine.cpp")
list (APPEND OPENTTD_SRCS "src/fileio.cpp")
list (APPEND OPENTTD_SRCS "src/fios.cpp")
list (APPEND OPENTTD_SRCS "src/fontcache.cpp")
list (APPEND OPENTTD_SRCS "src/fontdetection.cpp")
list (APPEND OPENTTD_SRCS "src/base_consist.cpp")
list (APPEND OPENTTD_SRCS "src/gamelog.cpp")
list (APPEND OPENTTD_SRCS "src/genworld.cpp")
list (APPEND OPENTTD_SRCS "src/gfx.cpp")
list (APPEND OPENTTD_SRCS "src/gfxinit.cpp")
list (APPEND OPENTTD_SRCS "src/gfx_layout.cpp")
list (APPEND OPENTTD_SRCS "src/goal.cpp")
list (APPEND OPENTTD_SRCS "src/ground_vehicle.cpp")
list (APPEND OPENTTD_SRCS "src/heightmap.cpp")
list (APPEND OPENTTD_SRCS "src/highscore.cpp")
list (APPEND OPENTTD_SRCS "src/hotkeys.cpp")
list (APPEND OPENTTD_SRCS "src/ini.cpp")
list (APPEND OPENTTD_SRCS "src/ini_load.cpp")
list (APPEND OPENTTD_SRCS "src/landscape.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/demands.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/flowmapper.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraphjob.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraphschedule.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/mcf.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/refresh.cpp")
list (APPEND OPENTTD_SRCS "src/map.cpp")
list (APPEND OPENTTD_SRCS "src/misc.cpp")
list (APPEND OPENTTD_SRCS "src/mixer.cpp")
list (APPEND OPENTTD_SRCS "src/music.cpp")
list (APPEND OPENTTD_SRCS "src/network/network.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_admin.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_client.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_command.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_content.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_gamelist.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_server.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_udp.cpp")
list (APPEND OPENTTD_SRCS "src/openttd.cpp")
list (APPEND OPENTTD_SRCS "src/order_backup.cpp")
list (APPEND OPENTTD_SRCS "src/pbs.cpp")
list (APPEND OPENTTD_SRCS "src/progress.cpp")
list (APPEND OPENTTD_SRCS "src/rail.cpp")
list (APPEND OPENTTD_SRCS "src/rev.cpp")
list (APPEND OPENTTD_SRCS "src/road.cpp")
list (APPEND OPENTTD_SRCS "src/roadstop.cpp")
list (APPEND OPENTTD_SRCS "src/screenshot.cpp")
if (WITH_SDL)
    list (APPEND OPENTTD_SRCS "src/sdl.cpp")
endif ()
list (APPEND OPENTTD_SRCS "src/settings.cpp")
list (APPEND OPENTTD_SRCS "src/signal.cpp")
list (APPEND OPENTTD_SRCS "src/signs.cpp")
list (APPEND OPENTTD_SRCS "src/sound.cpp")
list (APPEND OPENTTD_SRCS "src/sprite.cpp")
list (APPEND OPENTTD_SRCS "src/spritecache.cpp")
list (APPEND OPENTTD_SRCS "src/station.cpp")
list (APPEND OPENTTD_SRCS "src/strgen/strgen_base.cpp")
list (APPEND OPENTTD_SRCS "src/string.cpp")
list (APPEND OPENTTD_SRCS "src/stringfilter.cpp")
list (APPEND OPENTTD_SRCS "src/strings.cpp")
list (APPEND OPENTTD_SRCS "src/story.cpp")
list (APPEND OPENTTD_SRCS "src/subsidy.cpp")
list (APPEND OPENTTD_SRCS "src/textbuf.cpp")
list (APPEND OPENTTD_SRCS "src/texteff.cpp")
list (APPEND OPENTTD_SRCS "src/tgp.cpp")
list (APPEND OPENTTD_SRCS "src/tile_map.cpp")
list (APPEND OPENTTD_SRCS "src/tilearea.cpp")
list (APPEND OPENTTD_SRCS "src/townname.cpp")
if (WIN32)
else ()
    if (OS STREQUAL "OS2")
        list (APPEND OPENTTD_SRCS "src/os/os2/os2.cpp")
        list (APPEND OPENTTD_SRCS "src/3rdparty/os2/getaddrinfo.c")
        list (APPEND OPENTTD_SRCS "src/3rdparty/os2/getaddrinfo.h")
        list (APPEND OPENTTD_SRCS "src/3rdparty/os2/getnameinfo.c")
        list (APPEND OPENTTD_SRCS "src/3rdparty/os2/getnameinfo.h")
    else ()
        if (OS STREQUAL "OSX")
            list (APPEND OPENTTD_SRCS "src/os/macosx/crashlog_osx.cpp")
        else ()
            list (APPEND OPENTTD_SRCS "src/os/unix/crashlog_unix.cpp")
        endif ()
        list (APPEND OPENTTD_SRCS "src/os/unix/unix.cpp")
    endif ()
endif ()
list (APPEND OPENTTD_SRCS "src/vehicle.cpp")
list (APPEND OPENTTD_SRCS "src/vehiclelist.cpp")
list (APPEND OPENTTD_SRCS "src/viewport.cpp")
if (WITH_SSE)
    list (APPEND OPENTTD_SRCS "src/viewport_sprite_sorter_sse4.cpp")
endif ()
list (APPEND OPENTTD_SRCS "src/waypoint.cpp")
list (APPEND OPENTTD_SRCS "src/widget.cpp")
list (APPEND OPENTTD_SRCS "src/window.cpp")
if (WITH_ALLEGRO)
    list (APPEND OPENTTD_SRCS "src/music/allegro_m.h")
    list (APPEND OPENTTD_SRCS "src/sound/allegro_s.h")
    list (APPEND OPENTTD_SRCS "src/video/allegro_v.h")
endif ()
list (APPEND OPENTTD_SRCS "src/aircraft.h")
list (APPEND OPENTTD_SRCS "src/airport.h")
list (APPEND OPENTTD_SRCS "src/animated_tile_func.h")
list (APPEND OPENTTD_SRCS "src/articulated_vehicles.h")
list (APPEND OPENTTD_SRCS "src/autoreplace_base.h")
list (APPEND OPENTTD_SRCS "src/autoreplace_func.h")
list (APPEND OPENTTD_SRCS "src/autoreplace_gui.h")
list (APPEND OPENTTD_SRCS "src/autoreplace_type.h")
list (APPEND OPENTTD_SRCS "src/autoslope.h")
list (APPEND OPENTTD_SRCS "src/base_media_base.h")
list (APPEND OPENTTD_SRCS "src/base_media_func.h")
list (APPEND OPENTTD_SRCS "src/base_station_base.h")
list (APPEND OPENTTD_SRCS "src/bmp.h")
list (APPEND OPENTTD_SRCS "src/bridge.h")
list (APPEND OPENTTD_SRCS "src/cargo_type.h")
list (APPEND OPENTTD_SRCS "src/cargoaction.h")
list (APPEND OPENTTD_SRCS "src/cargomonitor.h")
list (APPEND OPENTTD_SRCS "src/cargopacket.h")
list (APPEND OPENTTD_SRCS "src/cargotype.h")
list (APPEND OPENTTD_SRCS "src/cheat_func.h")
list (APPEND OPENTTD_SRCS "src/cheat_type.h")
list (APPEND OPENTTD_SRCS "src/clear_func.h")
list (APPEND OPENTTD_SRCS "src/cmd_helper.h")
list (APPEND OPENTTD_SRCS "src/command_func.h")
list (APPEND OPENTTD_SRCS "src/command_type.h")
list (APPEND OPENTTD_SRCS "src/company_base.h")
list (APPEND OPENTTD_SRCS "src/company_func.h")
list (APPEND OPENTTD_SRCS "src/company_gui.h")
list (APPEND OPENTTD_SRCS "src/company_manager_face.h")
list (APPEND OPENTTD_SRCS "src/company_type.h")
list (APPEND OPENTTD_SRCS "src/console_func.h")
list (APPEND OPENTTD_SRCS "src/console_gui.h")
list (APPEND OPENTTD_SRCS "src/console_internal.h")
list (APPEND OPENTTD_SRCS "src/console_type.h")
list (APPEND OPENTTD_SRCS "src/cpu.h")
list (APPEND OPENTTD_SRCS "src/crashlog.h")
list (APPEND OPENTTD_SRCS "src/currency.h")
list (APPEND OPENTTD_SRCS "src/date_func.h")
list (APPEND OPENTTD_SRCS "src/date_gui.h")
list (APPEND OPENTTD_SRCS "src/date_type.h")
list (APPEND OPENTTD_SRCS "src/debug.h")
list (APPEND OPENTTD_SRCS "src/video/dedicated_v.h")
list (APPEND OPENTTD_SRCS "src/depot_base.h")
list (APPEND OPENTTD_SRCS "src/depot_func.h")
list (APPEND OPENTTD_SRCS "src/depot_map.h")
list (APPEND OPENTTD_SRCS "src/depot_type.h")
list (APPEND OPENTTD_SRCS "src/direction_func.h")
list (APPEND OPENTTD_SRCS "src/direction_type.h")
list (APPEND OPENTTD_SRCS "src/disaster_vehicle.h")
list (APPEND OPENTTD_SRCS "src/music/dmusic.h")
list (APPEND OPENTTD_SRCS "src/driver.h")
list (APPEND OPENTTD_SRCS "src/economy_base.h")
list (APPEND OPENTTD_SRCS "src/economy_func.h")
list (APPEND OPENTTD_SRCS "src/economy_type.h")
list (APPEND OPENTTD_SRCS "src/effectvehicle_base.h")
list (APPEND OPENTTD_SRCS "src/effectvehicle_func.h")
list (APPEND OPENTTD_SRCS "src/elrail_func.h")
list (APPEND OPENTTD_SRCS "src/engine_base.h")
list (APPEND OPENTTD_SRCS "src/engine_func.h")
list (APPEND OPENTTD_SRCS "src/engine_gui.h")
list (APPEND OPENTTD_SRCS "src/engine_type.h")
list (APPEND OPENTTD_SRCS "src/error.h")
list (APPEND OPENTTD_SRCS "src/fileio_func.h")
list (APPEND OPENTTD_SRCS "src/fileio_type.h")
list (APPEND OPENTTD_SRCS "src/fios.h")
list (APPEND OPENTTD_SRCS "src/fontcache.h")
list (APPEND OPENTTD_SRCS "src/fontdetection.h")
list (APPEND OPENTTD_SRCS "src/framerate_type.h")
list (APPEND OPENTTD_SRCS "src/base_consist.h")
list (APPEND OPENTTD_SRCS "src/gamelog.h")
list (APPEND OPENTTD_SRCS "src/gamelog_internal.h")
list (APPEND OPENTTD_SRCS "src/genworld.h")
list (APPEND OPENTTD_SRCS "src/gfx_func.h")
list (APPEND OPENTTD_SRCS "src/gfx_layout.h")
list (APPEND OPENTTD_SRCS "src/gfx_type.h")
list (APPEND OPENTTD_SRCS "src/gfxinit.h")
list (APPEND OPENTTD_SRCS "src/goal_base.h")
list (APPEND OPENTTD_SRCS "src/goal_type.h")
list (APPEND OPENTTD_SRCS "src/graph_gui.h")
list (APPEND OPENTTD_SRCS "src/ground_vehicle.hpp")
list (APPEND OPENTTD_SRCS "src/group.h")
list (APPEND OPENTTD_SRCS "src/group_gui.h")
list (APPEND OPENTTD_SRCS "src/group_type.h")
list (APPEND OPENTTD_SRCS "src/gui.h")
list (APPEND OPENTTD_SRCS "src/heightmap.h")
list (APPEND OPENTTD_SRCS "src/highscore.h")
list (APPEND OPENTTD_SRCS "src/hotkeys.h")
list (APPEND OPENTTD_SRCS "src/house.h")
list (APPEND OPENTTD_SRCS "src/house_type.h")
list (APPEND OPENTTD_SRCS "src/industry.h")
list (APPEND OPENTTD_SRCS "src/industry_type.h")
list (APPEND OPENTTD_SRCS "src/industrytype.h")
list (APPEND OPENTTD_SRCS "src/ini_type.h")
list (APPEND OPENTTD_SRCS "src/landscape.h")
list (APPEND OPENTTD_SRCS "src/landscape_type.h")
list (APPEND OPENTTD_SRCS "src/language.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/demands.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/flowmapper.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/init.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph_base.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph_gui.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph_type.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraphjob.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraphjob_base.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraphschedule.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/mcf.h")
list (APPEND OPENTTD_SRCS "src/linkgraph/refresh.h")
list (APPEND OPENTTD_SRCS "src/livery.h")
list (APPEND OPENTTD_SRCS "src/map_func.h")
list (APPEND OPENTTD_SRCS "src/map_type.h")
list (APPEND OPENTTD_SRCS "src/mixer.h")
list (APPEND OPENTTD_SRCS "src/network/network.h")
list (APPEND OPENTTD_SRCS "src/network/network_admin.h")
list (APPEND OPENTTD_SRCS "src/network/network_base.h")
list (APPEND OPENTTD_SRCS "src/network/network_client.h")
list (APPEND OPENTTD_SRCS "src/network/network_content.h")
list (APPEND OPENTTD_SRCS "src/network/network_content_gui.h")
list (APPEND OPENTTD_SRCS "src/network/network_func.h")
list (APPEND OPENTTD_SRCS "src/network/network_gamelist.h")
list (APPEND OPENTTD_SRCS "src/network/network_gui.h")
list (APPEND OPENTTD_SRCS "src/network/network_internal.h")
list (APPEND OPENTTD_SRCS "src/network/network_server.h")
list (APPEND OPENTTD_SRCS "src/network/network_type.h")
list (APPEND OPENTTD_SRCS "src/network/network_udp.h")
list (APPEND OPENTTD_SRCS "src/newgrf.h")
list (APPEND OPENTTD_SRCS "src/newgrf_airport.h")
list (APPEND OPENTTD_SRCS "src/newgrf_airporttiles.h")
list (APPEND OPENTTD_SRCS "src/newgrf_animation_base.h")
list (APPEND OPENTTD_SRCS "src/newgrf_animation_type.h")
list (APPEND OPENTTD_SRCS "src/newgrf_callbacks.h")
list (APPEND OPENTTD_SRCS "src/newgrf_canal.h")
list (APPEND OPENTTD_SRCS "src/newgrf_cargo.h")
list (APPEND OPENTTD_SRCS "src/newgrf_class.h")
list (APPEND OPENTTD_SRCS "src/newgrf_class_func.h")
list (APPEND OPENTTD_SRCS "src/newgrf_commons.h")
list (APPEND OPENTTD_SRCS "src/newgrf_config.h")
list (APPEND OPENTTD_SRCS "src/newgrf_debug.h")
list (APPEND OPENTTD_SRCS "src/newgrf_engine.h")
list (APPEND OPENTTD_SRCS "src/newgrf_generic.h")
list (APPEND OPENTTD_SRCS "src/newgrf_house.h")
list (APPEND OPENTTD_SRCS "src/newgrf_industries.h")
list (APPEND OPENTTD_SRCS "src/newgrf_industrytiles.h")
list (APPEND OPENTTD_SRCS "src/newgrf_object.h")
list (APPEND OPENTTD_SRCS "src/newgrf_properties.h")
list (APPEND OPENTTD_SRCS "src/newgrf_railtype.h")
list (APPEND OPENTTD_SRCS "src/newgrf_sound.h")
list (APPEND OPENTTD_SRCS "src/newgrf_spritegroup.h")
list (APPEND OPENTTD_SRCS "src/newgrf_station.h")
list (APPEND OPENTTD_SRCS "src/newgrf_storage.h")
list (APPEND OPENTTD_SRCS "src/newgrf_text.h")
list (APPEND OPENTTD_SRCS "src/newgrf_town.h")
list (APPEND OPENTTD_SRCS "src/newgrf_townname.h")
list (APPEND OPENTTD_SRCS "src/news_func.h")
list (APPEND OPENTTD_SRCS "src/news_gui.h")
list (APPEND OPENTTD_SRCS "src/news_type.h")
list (APPEND OPENTTD_SRCS "src/music/midi.h")
list (APPEND OPENTTD_SRCS "src/music/midifile.hpp")
list (APPEND OPENTTD_SRCS "src/music/null_m.h")
list (APPEND OPENTTD_SRCS "src/sound/null_s.h")
list (APPEND OPENTTD_SRCS "src/video/null_v.h")
list (APPEND OPENTTD_SRCS "src/object.h")
list (APPEND OPENTTD_SRCS "src/object_base.h")
list (APPEND OPENTTD_SRCS "src/object_type.h")
list (APPEND OPENTTD_SRCS "src/openttd.h")
list (APPEND OPENTTD_SRCS "src/order_backup.h")
list (APPEND OPENTTD_SRCS "src/order_base.h")
list (APPEND OPENTTD_SRCS "src/order_func.h")
list (APPEND OPENTTD_SRCS "src/order_type.h")
list (APPEND OPENTTD_SRCS "src/pbs.h")
list (APPEND OPENTTD_SRCS "src/progress.h")
list (APPEND OPENTTD_SRCS "src/querystring_gui.h")
list (APPEND OPENTTD_SRCS "src/rail.h")
list (APPEND OPENTTD_SRCS "src/rail_gui.h")
list (APPEND OPENTTD_SRCS "src/rail_type.h")
list (APPEND OPENTTD_SRCS "src/rev.h")
list (APPEND OPENTTD_SRCS "src/road_cmd.h")
list (APPEND OPENTTD_SRCS "src/road_func.h")
list (APPEND OPENTTD_SRCS "src/road_gui.h")
list (APPEND OPENTTD_SRCS "src/road_internal.h")
list (APPEND OPENTTD_SRCS "src/road_type.h")
list (APPEND OPENTTD_SRCS "src/roadstop_base.h")
list (APPEND OPENTTD_SRCS "src/roadveh.h")
list (APPEND OPENTTD_SRCS "src/safeguards.h")
list (APPEND OPENTTD_SRCS "src/screenshot.h")
list (APPEND OPENTTD_SRCS "src/sdl.h")
list (APPEND OPENTTD_SRCS "src/sound/sdl_s.h")
list (APPEND OPENTTD_SRCS "src/video/sdl_v.h")
list (APPEND OPENTTD_SRCS "src/settings_func.h")
list (APPEND OPENTTD_SRCS "src/settings_gui.h")
list (APPEND OPENTTD_SRCS "src/settings_internal.h")
list (APPEND OPENTTD_SRCS "src/settings_type.h")
list (APPEND OPENTTD_SRCS "src/ship.h")
list (APPEND OPENTTD_SRCS "src/signal_func.h")
list (APPEND OPENTTD_SRCS "src/signal_type.h")
list (APPEND OPENTTD_SRCS "src/signs_base.h")
list (APPEND OPENTTD_SRCS "src/signs_func.h")
list (APPEND OPENTTD_SRCS "src/signs_type.h")
list (APPEND OPENTTD_SRCS "src/slope_func.h")
list (APPEND OPENTTD_SRCS "src/slope_type.h")
list (APPEND OPENTTD_SRCS "src/smallmap_gui.h")
list (APPEND OPENTTD_SRCS "src/sortlist_type.h")
list (APPEND OPENTTD_SRCS "src/sound_func.h")
list (APPEND OPENTTD_SRCS "src/sound_type.h")
list (APPEND OPENTTD_SRCS "src/sprite.h")
list (APPEND OPENTTD_SRCS "src/spritecache.h")
list (APPEND OPENTTD_SRCS "src/station_base.h")
list (APPEND OPENTTD_SRCS "src/station_func.h")
list (APPEND OPENTTD_SRCS "src/station_gui.h")
list (APPEND OPENTTD_SRCS "src/station_type.h")
list (APPEND OPENTTD_SRCS "src/statusbar_gui.h")
list (APPEND OPENTTD_SRCS "src/stdafx.h")
list (APPEND OPENTTD_SRCS "src/stock_exchange.h")
list (APPEND OPENTTD_SRCS "src/story_base.h")
list (APPEND OPENTTD_SRCS "src/story_type.h")
list (APPEND OPENTTD_SRCS "src/strgen/strgen.h")
list (APPEND OPENTTD_SRCS "src/string_base.h")
list (APPEND OPENTTD_SRCS "src/string_func.h")
list (APPEND OPENTTD_SRCS "src/string_type.h")
list (APPEND OPENTTD_SRCS "src/os/windows/string_uniscribe.h")
list (APPEND OPENTTD_SRCS "src/stringfilter_type.h")
list (APPEND OPENTTD_SRCS "src/strings_func.h")
list (APPEND OPENTTD_SRCS "src/strings_type.h")
list (APPEND OPENTTD_SRCS "src/subsidy_base.h")
list (APPEND OPENTTD_SRCS "src/subsidy_func.h")
list (APPEND OPENTTD_SRCS "src/subsidy_type.h")
list (APPEND OPENTTD_SRCS "src/tar_type.h")
list (APPEND OPENTTD_SRCS "src/terraform_gui.h")
list (APPEND OPENTTD_SRCS "src/textbuf_gui.h")
list (APPEND OPENTTD_SRCS "src/textbuf_type.h")
list (APPEND OPENTTD_SRCS "src/texteff.hpp")
list (APPEND OPENTTD_SRCS "src/textfile_gui.h")
list (APPEND OPENTTD_SRCS "src/textfile_type.h")
list (APPEND OPENTTD_SRCS "src/tgp.h")
list (APPEND OPENTTD_SRCS "src/tile_cmd.h")
list (APPEND OPENTTD_SRCS "src/tile_type.h")
list (APPEND OPENTTD_SRCS "src/tilearea_type.h")
list (APPEND OPENTTD_SRCS "src/tilehighlight_func.h")
list (APPEND OPENTTD_SRCS "src/tilehighlight_type.h")
list (APPEND OPENTTD_SRCS "src/tilematrix_type.hpp")
list (APPEND OPENTTD_SRCS "src/timetable.h")
list (APPEND OPENTTD_SRCS "src/toolbar_gui.h")
list (APPEND OPENTTD_SRCS "src/town.h")
list (APPEND OPENTTD_SRCS "src/town_type.h")
list (APPEND OPENTTD_SRCS "src/townname_func.h")
list (APPEND OPENTTD_SRCS "src/townname_type.h")
list (APPEND OPENTTD_SRCS "src/track_func.h")
list (APPEND OPENTTD_SRCS "src/track_type.h")
list (APPEND OPENTTD_SRCS "src/train.h")
list (APPEND OPENTTD_SRCS "src/transparency.h")
list (APPEND OPENTTD_SRCS "src/transparency_gui.h")
list (APPEND OPENTTD_SRCS "src/transport_type.h")
list (APPEND OPENTTD_SRCS "src/tunnelbridge.h")
list (APPEND OPENTTD_SRCS "src/vehicle_base.h")
list (APPEND OPENTTD_SRCS "src/vehicle_func.h")
list (APPEND OPENTTD_SRCS "src/vehicle_gui.h")
list (APPEND OPENTTD_SRCS "src/vehicle_gui_base.h")
list (APPEND OPENTTD_SRCS "src/vehicle_type.h")
list (APPEND OPENTTD_SRCS "src/vehiclelist.h")
list (APPEND OPENTTD_SRCS "src/viewport_func.h")
list (APPEND OPENTTD_SRCS "src/viewport_sprite_sorter.h")
list (APPEND OPENTTD_SRCS "src/viewport_type.h")
list (APPEND OPENTTD_SRCS "src/water.h")
list (APPEND OPENTTD_SRCS "src/waypoint_base.h")
list (APPEND OPENTTD_SRCS "src/waypoint_func.h")
list (APPEND OPENTTD_SRCS "src/widget_type.h")
list (APPEND OPENTTD_SRCS "src/os/windows/win32.h")
list (APPEND OPENTTD_SRCS "src/music/win32_m.h")
list (APPEND OPENTTD_SRCS "src/sound/win32_s.h")
list (APPEND OPENTTD_SRCS "src/video/win32_v.h")
list (APPEND OPENTTD_SRCS "src/window_func.h")
list (APPEND OPENTTD_SRCS "src/window_gui.h")
list (APPEND OPENTTD_SRCS "src/window_type.h")
list (APPEND OPENTTD_SRCS "src/sound/xaudio2_s.h")
list (APPEND OPENTTD_SRCS "src/zoom_func.h")
list (APPEND OPENTTD_SRCS "src/zoom_type.h")
if (WIN32)
else ()
    list (APPEND OPENTTD_SRCS "src/music/bemidi.h")
    list (APPEND OPENTTD_SRCS "src/music/cocoa_m.h")
    list (APPEND OPENTTD_SRCS "src/music/extmidi.h")
    list (APPEND OPENTTD_SRCS "src/music/libtimidity.h")
    list (APPEND OPENTTD_SRCS "src/music/os2_m.h")
    list (APPEND OPENTTD_SRCS "src/music/qtmidi.h")
    list (APPEND OPENTTD_SRCS "src/os/macosx/macos.h")
    list (APPEND OPENTTD_SRCS "src/os/macosx/osx_stdafx.h")
    list (APPEND OPENTTD_SRCS "src/os/macosx/splash.h")
    list (APPEND OPENTTD_SRCS "src/sound/cocoa_s.h")
    list (APPEND OPENTTD_SRCS "src/video/cocoa/cocoa_keys.h")
    list (APPEND OPENTTD_SRCS "src/video/cocoa/cocoa_v.h")
endif ()
list (APPEND OPENTTD_SRCS "src/core/alloc_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/alloc_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/alloc_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/backup_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/bitmath_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/bitmath_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/endian_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/endian_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/enum_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/geometry_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/geometry_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/geometry_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/math_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/math_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/mem_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/multimap.hpp")
list (APPEND OPENTTD_SRCS "src/core/overflowsafe_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/pool_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/pool_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/pool_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/random_func.cpp")
list (APPEND OPENTTD_SRCS "src/core/random_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/smallmap_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/smallmatrix_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/smallstack_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/smallvec_type.hpp")
list (APPEND OPENTTD_SRCS "src/core/sort_func.hpp")
list (APPEND OPENTTD_SRCS "src/core/string_compare_type.hpp")
list (APPEND OPENTTD_SRCS "src/aircraft_gui.cpp")
list (APPEND OPENTTD_SRCS "src/airport_gui.cpp")
list (APPEND OPENTTD_SRCS "src/autoreplace_gui.cpp")
list (APPEND OPENTTD_SRCS "src/bootstrap_gui.cpp")
list (APPEND OPENTTD_SRCS "src/bridge_gui.cpp")
list (APPEND OPENTTD_SRCS "src/build_vehicle_gui.cpp")
list (APPEND OPENTTD_SRCS "src/cheat_gui.cpp")
list (APPEND OPENTTD_SRCS "src/company_gui.cpp")
list (APPEND OPENTTD_SRCS "src/console_gui.cpp")
list (APPEND OPENTTD_SRCS "src/date_gui.cpp")
list (APPEND OPENTTD_SRCS "src/depot_gui.cpp")
list (APPEND OPENTTD_SRCS "src/dock_gui.cpp")
list (APPEND OPENTTD_SRCS "src/engine_gui.cpp")
list (APPEND OPENTTD_SRCS "src/error_gui.cpp")
list (APPEND OPENTTD_SRCS "src/fios_gui.cpp")
list (APPEND OPENTTD_SRCS "src/framerate_gui.cpp")
list (APPEND OPENTTD_SRCS "src/genworld_gui.cpp")
list (APPEND OPENTTD_SRCS "src/goal_gui.cpp")
list (APPEND OPENTTD_SRCS "src/graph_gui.cpp")
list (APPEND OPENTTD_SRCS "src/group_gui.cpp")
list (APPEND OPENTTD_SRCS "src/highscore_gui.cpp")
list (APPEND OPENTTD_SRCS "src/industry_gui.cpp")
list (APPEND OPENTTD_SRCS "src/intro_gui.cpp")
list (APPEND OPENTTD_SRCS "src/linkgraph/linkgraph_gui.cpp")
list (APPEND OPENTTD_SRCS "src/main_gui.cpp")
list (APPEND OPENTTD_SRCS "src/misc_gui.cpp")
list (APPEND OPENTTD_SRCS "src/music_gui.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_chat_gui.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_content_gui.cpp")
list (APPEND OPENTTD_SRCS "src/network/network_gui.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_debug_gui.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_gui.cpp")
list (APPEND OPENTTD_SRCS "src/news_gui.cpp")
list (APPEND OPENTTD_SRCS "src/object_gui.cpp")
list (APPEND OPENTTD_SRCS "src/order_gui.cpp")
list (APPEND OPENTTD_SRCS "src/osk_gui.cpp")
list (APPEND OPENTTD_SRCS "src/rail_gui.cpp")
list (APPEND OPENTTD_SRCS "src/road_gui.cpp")
list (APPEND OPENTTD_SRCS "src/roadveh_gui.cpp")
list (APPEND OPENTTD_SRCS "src/settings_gui.cpp")
list (APPEND OPENTTD_SRCS "src/ship_gui.cpp")
list (APPEND OPENTTD_SRCS "src/signs_gui.cpp")
list (APPEND OPENTTD_SRCS "src/smallmap_gui.cpp")
list (APPEND OPENTTD_SRCS "src/station_gui.cpp")
list (APPEND OPENTTD_SRCS "src/statusbar_gui.cpp")
list (APPEND OPENTTD_SRCS "src/story_gui.cpp")
list (APPEND OPENTTD_SRCS "src/subsidy_gui.cpp")
list (APPEND OPENTTD_SRCS "src/terraform_gui.cpp")
list (APPEND OPENTTD_SRCS "src/textfile_gui.cpp")
list (APPEND OPENTTD_SRCS "src/timetable_gui.cpp")
list (APPEND OPENTTD_SRCS "src/toolbar_gui.cpp")
list (APPEND OPENTTD_SRCS "src/town_gui.cpp")
list (APPEND OPENTTD_SRCS "src/train_gui.cpp")
list (APPEND OPENTTD_SRCS "src/transparency_gui.cpp")
list (APPEND OPENTTD_SRCS "src/tree_gui.cpp")
list (APPEND OPENTTD_SRCS "src/vehicle_gui.cpp")
list (APPEND OPENTTD_SRCS "src/viewport_gui.cpp")
list (APPEND OPENTTD_SRCS "src/waypoint_gui.cpp")
list (APPEND OPENTTD_SRCS "src/widgets/airport_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/ai_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/autoreplace_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/bootstrap_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/bridge_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/build_vehicle_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/cheat_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/company_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/console_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/date_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/depot_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/dock_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/dropdown.cpp")
list (APPEND OPENTTD_SRCS "src/widgets/dropdown_func.h")
list (APPEND OPENTTD_SRCS "src/widgets/dropdown_type.h")
list (APPEND OPENTTD_SRCS "src/widgets/dropdown_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/engine_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/error_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/fios_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/framerate_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/genworld_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/goal_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/graph_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/group_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/highscore_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/industry_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/intro_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/link_graph_legend_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/main_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/misc_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/music_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/network_chat_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/network_content_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/network_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/newgrf_debug_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/newgrf_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/news_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/object_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/order_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/osk_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/rail_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/road_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/settings_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/sign_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/smallmap_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/station_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/statusbar_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/story_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/subsidy_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/terraform_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/timetable_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/toolbar_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/town_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/transparency_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/tree_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/vehicle_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/viewport_widget.h")
list (APPEND OPENTTD_SRCS "src/widgets/waypoint_widget.h")
list (APPEND OPENTTD_SRCS "src/aircraft_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/autoreplace_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/clear_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/company_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/depot_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/group_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/industry_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/misc_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/object_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/order_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/rail_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/road_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/roadveh_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/ship_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/signs_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/station_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/terraform_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/timetable_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/town_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/train_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/tree_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/tunnelbridge_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/vehicle_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/void_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/water_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/waypoint_cmd.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/afterload.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/ai_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/airport_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/animated_tile_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/autoreplace_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/cargomonitor_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/cargopacket_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/cheat_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/company_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/depot_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/economy_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/engine_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/game_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/gamelog_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/goal_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/group_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/industry_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/labelmaps_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/linkgraph_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/map_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/misc_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/newgrf_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/newgrf_sl.h")
list (APPEND OPENTTD_SRCS "src/saveload/object_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/oldloader.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/oldloader.h")
list (APPEND OPENTTD_SRCS "src/saveload/oldloader_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/order_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/saveload.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/saveload.h")
list (APPEND OPENTTD_SRCS "src/saveload/saveload_filter.h")
list (APPEND OPENTTD_SRCS "src/saveload/saveload_internal.h")
list (APPEND OPENTTD_SRCS "src/saveload/signs_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/station_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/storage_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/strings_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/story_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/subsidy_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/town_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/vehicle_sl.cpp")
list (APPEND OPENTTD_SRCS "src/saveload/waypoint_sl.cpp")
list (APPEND OPENTTD_SRCS "src/table/airport_defaults.h")
list (APPEND OPENTTD_SRCS "src/table/airport_movement.h")
list (APPEND OPENTTD_SRCS "src/table/airporttile_ids.h")
list (APPEND OPENTTD_SRCS "src/table/airporttiles.h")
list (APPEND OPENTTD_SRCS "src/table/animcursors.h")
list (APPEND OPENTTD_SRCS "src/table/autorail.h")
list (APPEND OPENTTD_SRCS "src/table/bridge_land.h")
list (APPEND OPENTTD_SRCS "src/table/build_industry.h")
list (APPEND OPENTTD_SRCS "src/table/cargo_const.h")
list (APPEND OPENTTD_SRCS "src/table/clear_land.h")
list (APPEND OPENTTD_SRCS "src/table/control_codes.h")
list (APPEND OPENTTD_SRCS "src/table/elrail_data.h")
list (APPEND OPENTTD_SRCS "src/table/engines.h")
list (APPEND OPENTTD_SRCS "src/table/genland.h")
list (APPEND OPENTTD_SRCS "src/table/heightmap_colours.h")
list (APPEND OPENTTD_SRCS "src/table/industry_land.h")
list (APPEND OPENTTD_SRCS "src/table/landscape_sprite.h")
list (APPEND OPENTTD_SRCS "src/table/newgrf_debug_data.h")
list (APPEND OPENTTD_SRCS "src/table/object_land.h")
list (APPEND OPENTTD_SRCS "src/table/palette_convert.h")
list (APPEND OPENTTD_SRCS "src/table/palettes.h")
list (APPEND OPENTTD_SRCS "src/table/pricebase.h")
list (APPEND OPENTTD_SRCS "src/table/railtypes.h")
list (APPEND OPENTTD_SRCS "src/table/road_land.h")
list (APPEND OPENTTD_SRCS "src/table/roadveh_movement.h")
list (APPEND OPENTTD_SRCS "objs/setting/table/settings.h")
list (APPEND OPENTTD_SRCS "src/table/sprites.h")
list (APPEND OPENTTD_SRCS "src/table/station_land.h")
list (APPEND OPENTTD_SRCS "src/table/strgen_tables.h")
list (APPEND OPENTTD_SRCS "src/table/string_colours.h")
list (APPEND OPENTTD_SRCS "objs/lang/table/strings.h")
list (APPEND OPENTTD_SRCS "src/table/town_land.h")
list (APPEND OPENTTD_SRCS "src/table/townname.h")
list (APPEND OPENTTD_SRCS "src/table/track_land.h")
list (APPEND OPENTTD_SRCS "src/table/train_cmd.h")
list (APPEND OPENTTD_SRCS "src/table/tree_land.h")
list (APPEND OPENTTD_SRCS "src/table/unicode.h")
list (APPEND OPENTTD_SRCS "src/table/water_land.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/md5/md5.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/md5/md5.h")
list (APPEND OPENTTD_SRCS "src/script/script_config.cpp")
list (APPEND OPENTTD_SRCS "src/script/script_config.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_fatalerror.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_info.cpp")
list (APPEND OPENTTD_SRCS "src/script/script_info.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_info_dummy.cpp")
list (APPEND OPENTTD_SRCS "src/script/script_instance.cpp")
list (APPEND OPENTTD_SRCS "src/script/script_instance.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_scanner.cpp")
list (APPEND OPENTTD_SRCS "src/script/script_scanner.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_storage.hpp")
list (APPEND OPENTTD_SRCS "src/script/script_suspend.hpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel.cpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel.hpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel_class.hpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel_helper.hpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel_helper_type.hpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel_std.cpp")
list (APPEND OPENTTD_SRCS "src/script/squirrel_std.hpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqapi.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqbaselib.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqclass.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqcompiler.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqdebug.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqfuncstate.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqlexer.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqmem.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqobject.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqstate.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/sqstdlib/sqstdaux.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/sqstdlib/sqstdmath.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqtable.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqvm.cpp")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqarray.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqclass.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqclosure.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqcompiler.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqfuncproto.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqfuncstate.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqlexer.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqobject.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqopcodes.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqpcheader.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqstate.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/include/sqstdaux.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/include/sqstdmath.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/include/sqstdstring.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqstring.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqtable.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/include/squirrel.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/squserdata.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/squtils.h")
list (APPEND OPENTTD_SRCS "src/3rdparty/squirrel/squirrel/sqvm.h")
list (APPEND OPENTTD_SRCS "src/ai/ai.hpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_config.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_config.hpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_core.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_gui.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_gui.hpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_info.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_info.hpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_instance.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_instance.hpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_scanner.cpp")
list (APPEND OPENTTD_SRCS "src/ai/ai_scanner.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/ai_changelog.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/game_changelog.hpp")
list (APPEND OPENTTD_SRCS "src/game/game.hpp")
list (APPEND OPENTTD_SRCS "src/game/game_config.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_config.hpp")
list (APPEND OPENTTD_SRCS "src/game/game_core.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_info.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_info.hpp")
list (APPEND OPENTTD_SRCS "src/game/game_instance.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_instance.hpp")
list (APPEND OPENTTD_SRCS "src/game/game_scanner.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_scanner.hpp")
list (APPEND OPENTTD_SRCS "src/game/game_text.cpp")
list (APPEND OPENTTD_SRCS "src/game/game_text.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_accounting.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_admin.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_airport.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_base.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_basestation.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_bridge.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_bridgelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargo.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargolist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargomonitor.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_client.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_clientlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_company.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_companymode.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_controller.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_date.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_depotlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_engine.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_enginelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_error.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_event.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_event_types.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_execmode.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_game.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_gamesettings.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_goal.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_group.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_grouplist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industry.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrylist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrytype.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrytypelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_info_docs.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_infrastructure.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_list.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_log.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_map.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_marine.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_news.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_object.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_order.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_rail.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_railtypelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_road.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_sign.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_signlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_station.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_stationlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_story_page.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_storypagelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_storypageelementlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_subsidy.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_subsidylist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_testmode.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_text.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tile.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tilelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_town.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_townlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tunnel.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_types.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_vehicle.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_vehiclelist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_viewport.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_waypoint.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_waypointlist.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_window.hpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_accounting.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_admin.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_airport.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_base.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_basestation.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_bridge.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_bridgelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargo.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargolist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_cargomonitor.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_client.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_clientlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_company.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_companymode.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_controller.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_date.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_depotlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_engine.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_enginelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_error.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_event.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_event_types.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_execmode.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_game.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_gamesettings.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_goal.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_group.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_grouplist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industry.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrylist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrytype.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_industrytypelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_infrastructure.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_list.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_log.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_map.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_marine.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_news.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_object.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_order.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_rail.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_railtypelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_road.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_sign.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_signlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_station.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_stationlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_story_page.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_storypagelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_storypageelementlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_subsidy.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_subsidylist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_testmode.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_text.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tile.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tilelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_town.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_townlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_tunnel.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_vehicle.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_vehiclelist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_viewport.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_waypoint.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_waypointlist.cpp")
list (APPEND OPENTTD_SRCS "src/script/api/script_window.cpp")
if (ENABLE_DEDICATED)
else ()
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim.hpp")
    if (WITH_SSE)
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim_sse2.cpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim_sse2.hpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim_sse4.cpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_anim_sse4.hpp")
    endif ()
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_base.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_base.hpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_optimized.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_optimized.hpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_simple.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/32bpp_simple.hpp")
    if (WITH_SSE)
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse_func.hpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse_type.h")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse2.cpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse2.hpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse4.cpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_sse4.hpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_ssse3.cpp")
        list (APPEND OPENTTD_SRCS "src/blitter/32bpp_ssse3.hpp")
    endif ()
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_base.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_base.hpp")
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_optimized.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_optimized.hpp")
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_simple.cpp")
    list (APPEND OPENTTD_SRCS "src/blitter/8bpp_simple.hpp")
endif ()
list (APPEND OPENTTD_SRCS "src/blitter/base.cpp")
list (APPEND OPENTTD_SRCS "src/blitter/base.hpp")
list (APPEND OPENTTD_SRCS "src/blitter/factory.hpp")
list (APPEND OPENTTD_SRCS "src/blitter/null.cpp")
list (APPEND OPENTTD_SRCS "src/blitter/null.hpp")
list (APPEND OPENTTD_SRCS "src/music/music_driver.hpp")
list (APPEND OPENTTD_SRCS "src/sound/sound_driver.hpp")
list (APPEND OPENTTD_SRCS "src/video/video_driver.hpp")
list (APPEND OPENTTD_SRCS "src/spriteloader/grf.cpp")
list (APPEND OPENTTD_SRCS "src/spriteloader/grf.hpp")
list (APPEND OPENTTD_SRCS "src/spriteloader/spriteloader.hpp")
list (APPEND OPENTTD_SRCS "src/newgrf.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_airport.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_airporttiles.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_canal.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_cargo.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_commons.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_config.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_engine.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_generic.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_house.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_industries.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_industrytiles.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_object.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_railtype.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_sound.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_spritegroup.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_station.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_storage.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_text.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_town.cpp")
list (APPEND OPENTTD_SRCS "src/newgrf_townname.cpp")
list (APPEND OPENTTD_SRCS "src/bridge_map.cpp")
list (APPEND OPENTTD_SRCS "src/bridge_map.h")
list (APPEND OPENTTD_SRCS "src/clear_map.h")
list (APPEND OPENTTD_SRCS "src/industry_map.h")
list (APPEND OPENTTD_SRCS "src/object_map.h")
list (APPEND OPENTTD_SRCS "src/rail_map.h")
list (APPEND OPENTTD_SRCS "src/road_map.cpp")
list (APPEND OPENTTD_SRCS "src/road_map.h")
list (APPEND OPENTTD_SRCS "src/station_map.h")
list (APPEND OPENTTD_SRCS "src/tile_map.h")
list (APPEND OPENTTD_SRCS "src/town_map.h")
list (APPEND OPENTTD_SRCS "src/tree_map.h")
list (APPEND OPENTTD_SRCS "src/tunnel_map.cpp")
list (APPEND OPENTTD_SRCS "src/tunnel_map.h")
list (APPEND OPENTTD_SRCS "src/tunnelbridge_map.h")
list (APPEND OPENTTD_SRCS "src/void_map.h")
list (APPEND OPENTTD_SRCS "src/water_map.h")
list (APPEND OPENTTD_SRCS "src/misc/array.hpp")
list (APPEND OPENTTD_SRCS "src/misc/binaryheap.hpp")
list (APPEND OPENTTD_SRCS "src/misc/blob.hpp")
list (APPEND OPENTTD_SRCS "src/misc/countedobj.cpp")
list (APPEND OPENTTD_SRCS "src/misc/countedptr.hpp")
list (APPEND OPENTTD_SRCS "src/misc/dbg_helpers.cpp")
list (APPEND OPENTTD_SRCS "src/misc/dbg_helpers.h")
list (APPEND OPENTTD_SRCS "src/misc/fixedsizearray.hpp")
list (APPEND OPENTTD_SRCS "src/misc/getoptdata.cpp")
list (APPEND OPENTTD_SRCS "src/misc/getoptdata.h")
list (APPEND OPENTTD_SRCS "src/misc/hashtable.hpp")
list (APPEND OPENTTD_SRCS "src/misc/str.hpp")
list (APPEND OPENTTD_SRCS "src/network/core/address.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/address.h")
list (APPEND OPENTTD_SRCS "src/network/core/config.h")
list (APPEND OPENTTD_SRCS "src/network/core/core.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/core.h")
list (APPEND OPENTTD_SRCS "src/network/core/game.h")
list (APPEND OPENTTD_SRCS "src/network/core/host.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/host.h")
list (APPEND OPENTTD_SRCS "src/network/core/os_abstraction.h")
list (APPEND OPENTTD_SRCS "src/network/core/packet.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/packet.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_admin.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_admin.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_connect.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_content.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_content.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_game.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_game.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_http.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_http.h")
list (APPEND OPENTTD_SRCS "src/network/core/tcp_listen.h")
list (APPEND OPENTTD_SRCS "src/network/core/udp.cpp")
list (APPEND OPENTTD_SRCS "src/network/core/udp.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/follow_track.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/opf/opf_ship.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/opf/opf_ship.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/pathfinder_func.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/pathfinder_type.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/pf_performance_timer.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/aystar.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/aystar.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/npf.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/npf_func.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/queue.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/npf/queue.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/nodelist.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_base.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_cache.h")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_common.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_costbase.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_costcache.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_costrail.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_destrail.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_node.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_node_rail.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_node_road.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_node_ship.hpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_rail.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_road.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_ship.cpp")
list (APPEND OPENTTD_SRCS "src/pathfinder/yapf/yapf_type.hpp")
list (APPEND OPENTTD_SRCS "src/video/dedicated_v.cpp")
list (APPEND OPENTTD_SRCS "src/video/null_v.cpp")
if (ENABLE_DEDICATED)
else ()
    if (WITH_ALLEGRO)
        list (APPEND OPENTTD_SRCS "src/video/allegro_v.cpp")
    endif ()
    if (WITH_SDL)
        list (APPEND OPENTTD_SRCS "src/video/sdl_v.cpp")
    endif ()
    if (WIN32)
        list (APPEND OPENTTD_SRCS "src/video/win32_v.cpp")
    endif ()
endif ()
if (ENABLE_DEDICATED)
else ()
    if (WITH_ALLEGRO)
        list (APPEND OPENTTD_SRCS "src/music/allegro_m.cpp")
    endif ()
    if (WITH_DIRECT_MUSIC)
        list (APPEND OPENTTD_SRCS "src/music/dmusic.cpp")
    endif ()
endif ()
list (APPEND OPENTTD_SRCS "src/music/null_m.cpp")
list (APPEND OPENTTD_SRCS "src/music/midifile.cpp")
if (ENABLE_DEDICATED)
else ()
    if (WIN32)
        list (APPEND OPENTTD_SRCS "src/music/win32_m.cpp")
    else ()
        if (WIN32)
        else ()
            if (OS STREQUAL "MORPHOS")
            else ()
                list (APPEND OPENTTD_SRCS "src/music/extmidi.cpp")
            endif ()
        endif ()
    endif ()
    if (OS STREQUAL "BEOS")
        list (APPEND OPENTTD_SRCS "src/music/bemidi.cpp")
    endif ()
    if (WITH_LIBTIMIDITY)
        list (APPEND OPENTTD_SRCS "src/music/libtimidity.cpp")
    endif ()
endif ()
list (APPEND OPENTTD_SRCS "src/sound/null_s.cpp")
if (ENABLE_DEDICATED)
else ()
    if (WITH_ALLEGRO)
        list (APPEND OPENTTD_SRCS "src/sound/allegro_s.cpp")
    endif ()
    if (WITH_SDL)
        list (APPEND OPENTTD_SRCS "src/sound/sdl_s.cpp")
    endif ()
    if (WIN32)
        list (APPEND OPENTTD_SRCS "src/sound/win32_s.cpp")
        list (APPEND OPENTTD_SRCS "src/sound/xaudio2_s.cpp")
    endif ()
endif ()
if (OS STREQUAL "OSX")
    list (APPEND OPENTTD_SRCS "src/os/macosx/macos.mm")
    if (ENABLE_DEDICATED)
    else ()
        list (APPEND OPENTTD_SRCS "src/music/qtmidi.cpp")
    endif ()
    if (WITH_COCOA)
        list (APPEND OPENTTD_SRCS "src/video/cocoa/cocoa_v.mm")
        list (APPEND OPENTTD_SRCS "src/video/cocoa/event.mm")
        list (APPEND OPENTTD_SRCS "src/video/cocoa/fullscreen.mm")
        list (APPEND OPENTTD_SRCS "src/video/cocoa/wnd_quartz.mm")
        list (APPEND OPENTTD_SRCS "src/video/cocoa/wnd_quickdraw.mm")
        list (APPEND OPENTTD_SRCS "src/music/cocoa_m.cpp")
        list (APPEND OPENTTD_SRCS "src/sound/cocoa_s.cpp")
        list (APPEND OPENTTD_SRCS "src/os/macosx/splash.cpp")
    endif ()
endif ()
if (WIN32)
    list (APPEND OPENTTD_SRCS "src/os/windows/crashlog_win.cpp")
    list (APPEND OPENTTD_SRCS "src/os/windows/ottdres.rc")
    list (APPEND OPENTTD_SRCS "src/os/windows/string_uniscribe.cpp")
    list (APPEND OPENTTD_SRCS "src/os/windows/win32.cpp")
endif ()
list (APPEND OPENTTD_SRCS "src/thread/thread.h")
if (WITH_THREADS)
    if (WIN32)
        list (APPEND OPENTTD_SRCS "src/thread/thread_win32.cpp")
    else ()
        if (OS STREQUAL "OS2")
            list (APPEND OPENTTD_SRCS "src/thread/thread_os2.cpp")
        else ()
            if (OS STREQUAL "MORPHOS")
                list (APPEND OPENTTD_SRCS "src/thread/thread_morphos.cpp")
            else ()
                list (APPEND OPENTTD_SRCS "src/thread/thread_pthread.cpp")
            endif ()
        endif ()
    endif ()
else ()
    list (APPEND OPENTTD_SRCS "src/thread/thread_none.cpp")
endif ()

if (MINGW OR CYGWIN OR WIN32)
    set (EXE ".exe")
endif ()

set (TTD "openttd${EXE}")
set (STRGEN "strgen${EXE}")
set (DEPEND "depend${EXE}")
set (SETTINGSGEN "settings_gen${EXE}")

include_directories (objs/setting)
include_directories (objs/lang)
include_directories (src/3rdparty/squirrel/include)
link_directories (${LIB_DIRS})

add_executable (${TTD} ${OPENTTD_SRCS})
target_link_libraries (${TTD} ${LIBS})